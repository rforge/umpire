
R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Umpire"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Umpire')
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CancerEngine-class")
> ### * CancerEngine-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CancerEngine-class
> ### Title: Class "CancerEngine" ~~~
> ### Aliases: CancerEngine-class rand,CancerEngine-method
> ### Keywords: classes datagen
> 
> ### ** Examples
> 
> showClass("CancerEngine")
Class "CancerEngine" [package "Umpire"]

Slots:
                          
Name:       base   altered
Class: character character
> 
> 
> 
> cleanEx()
> nameEx("CancerModel-class")
> ### * CancerModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CancerModel-class
> ### Title: The "CancerModel" Class
> ### Aliases: CancerModel-class CancerModel ncol,CancerModel-method
> ###   nrow,CancerModel-method rand,CancerModel-method
> ###   summary,CancerModel-method nPatterns nPossibleHits nHitsPerPattern
> ###   survivalCoefficients outcomeCoefficients
> ### Keywords: classes datagen
> 
> ### ** Examples
> 
> showClass("CancerModel")
Class "CancerModel" [package "Umpire"]

Slots:
                                                                       
Name:          name   hitPattern survivalBeta  outcomeBeta   prevalence
Class:    character       matrix      numeric      numeric      numeric
                   
Name:          call
Class:         call
> 
> 
> 
> cleanEx()
> nameEx("CancerPatientSet-class")
> ### * CancerPatientSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CancerPatientSet-class
> ### Title: Class "CancerPatientSet" ~~~
> ### Aliases: CancerPatientSet-class CancerPatientSet
> ###   as.data.frame,CancerPatientSet-method summary,CancerPatientSet-method
> ### Keywords: classes datagen
> 
> ### ** Examples
> 
> showClass("CancerPatientSet")
Class "CancerPatientSet" [package "Umpire"]

Slots:
                              
Name:       parent    hitClass
Class: CancerModel     numeric
> 
> 
> 
> cleanEx()
> nameEx("Engine-class")
> ### * Engine-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Engine-class
> ### Title: The Engine Class
> ### Aliases: Engine-class Engine alterMean,Engine-method
> ###   alterSD,Engine-method nrow,Engine-method rand,Engine-method
> ###   summary,Engine-method nComponents
> ### Keywords: datagen classes
> 
> ### ** Examples
> 
> nComp <- 10
> nGenes <- 100
> comp <- list()
> for (i in 1:nComp){
+   comp[[i]] <- IndependentNormal(rnorm(nGenes/nComp,6,1.5),1/rgamma(nGenes/nComp,44,28))
+ }
> myEngine <- Engine(comp)
> nrow(myEngine)
[1] 100
> nComponents(myEngine)
[1] 10
> summary(myEngine)
An Engine with 10 components.
> myData <- rand(myEngine,5)
> dim(myData)
[1] 100   5
> summary(myData)
       V1              V2              V3              V4       
 Min.   :2.172   Min.   :1.700   Min.   :2.159   Min.   :3.000  
 1st Qu.:5.021   1st Qu.:4.961   1st Qu.:5.020   1st Qu.:5.080  
 Median :5.987   Median :6.131   Median :6.116   Median :6.257  
 Mean   :6.076   Mean   :6.131   Mean   :6.130   Mean   :6.209  
 3rd Qu.:7.305   3rd Qu.:7.255   3rd Qu.:7.270   3rd Qu.:7.343  
 Max.   :9.496   Max.   :9.470   Max.   :9.700   Max.   :9.750  
       V5       
 Min.   :2.365  
 1st Qu.:5.020  
 Median :6.102  
 Mean   :6.108  
 3rd Qu.:7.209  
 Max.   :9.255  
> OFFSET <- 2
> myEngine.alterMean <- alterMean(myEngine,function(x){x+OFFSET})
> myData.alterMean <- rand(myEngine.alterMean,5)
> summary(myData.alterMean)
       V1               V2               V3               V4        
 Min.   : 4.874   Min.   : 4.126   Min.   : 4.179   Min.   : 4.622  
 1st Qu.: 6.734   1st Qu.: 7.028   1st Qu.: 6.998   1st Qu.: 7.298  
 Median : 8.057   Median : 8.224   Median : 8.036   Median : 8.165  
 Mean   : 8.106   Mean   : 8.188   Mean   : 8.066   Mean   : 8.223  
 3rd Qu.: 9.329   3rd Qu.: 9.402   3rd Qu.: 9.382   3rd Qu.: 9.340  
 Max.   :11.973   Max.   :11.955   Max.   :11.156   Max.   :12.530  
       V5        
 Min.   : 3.897  
 1st Qu.: 7.070  
 Median : 7.986  
 Mean   : 8.055  
 3rd Qu.: 9.243  
 Max.   :12.058  
> SCALE <- 2
> myEngine.alterSD <- alterSD(myEngine,function(x){x*SCALE})
> myData.alterSD <- rand(myEngine.alterSD,5)
> summary(myData.alterSD)
       V1               V2                V3                V4        
 Min.   : 1.694   Min.   : 0.3911   Min.   : 0.6885   Min.   :0.2929  
 1st Qu.: 4.138   1st Qu.: 4.7703   1st Qu.: 5.1754   1st Qu.:5.0019  
 Median : 6.009   Median : 5.9811   Median : 6.0485   Median :6.1882  
 Mean   : 5.902   Mean   : 5.9567   Mean   : 6.3215   Mean   :6.2531  
 3rd Qu.: 7.100   3rd Qu.: 7.4158   3rd Qu.: 7.4389   3rd Qu.:7.8108  
 Max.   :10.514   Max.   :10.7978   Max.   :11.2137   Max.   :9.8799  
       V5        
 Min.   : 1.220  
 1st Qu.: 4.864  
 Median : 5.941  
 Mean   : 6.101  
 3rd Qu.: 7.334  
 Max.   :11.944  
> 
> 
> 
> cleanEx()
> nameEx("EngineWithActivity-class")
> ### * EngineWithActivity-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EngineWithActivity-class
> ### Title: The EngineWithActivity Class
> ### Aliases: EngineWithActivity-class EngineWithActivity
> ###   alterMean,EngineWithActivity-method alterSD,EngineWithActivity-method
> ###   rand,EngineWithActivity-method nrow,EngineWithActivity-method
> ###   summary,EngineWithActivity-method
> ### Keywords: datagen classes
> 
> ### ** Examples
> 
> nComponents <- 10
> nGenes <- 100
> active <- 0.7
> comp <- list()
> for (i in 1:nComponents){
+   comp[[i]] <- IndependentNormal(rnorm(nGenes/nComponents,6,1.5),1/rgamma(nGenes/nComponents,44,28))
+ }
> myEngine <- EngineWithActivity(active,comp,2)
> summary(myEngine)
An Engine with 10 components.
Fraction of active genes 9> myData <- rand(myEngine,5)
> dim(myData)
[1] 100   5
> 
> 
> 
> cleanEx()
> nameEx("IndependentLogNormal-class")
> ### * IndependentLogNormal-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IndependentLogNormal-class
> ### Title: The IndependentNormal Class
> ### Aliases: IndependentLogNormal-class IndependentLogNormal
> ###   nrow,IndependentLogNormal-method rand,IndependentLogNormal-method
> ###   summary,IndependentLogNormal-method
> ### Keywords: datagen classes distribution
> 
> ### ** Examples
> 
>   nGenes <- 20
>   logmu <- rnorm(nGenes, 6, 1)
>   logsigma <- 1/rgamma(nGenes, rate=14, shape=6)
>   ln <- IndependentLogNormal(logmu, logsigma)
>   nrow(ln)
[1] 20
>   summary(ln)
An IndependentLogNormal object, representing a vector
of length 20 of independent log normal random variables.
>   if(any(logmu - ln@logmu)) {
+     print('means do not match')
+   } else {
+     print('means verified')
+   }
Warning in any(logmu - ln@logmu) :
  coercing argument of type 'double' to logical
[1] "means verified"
>   if(any(logsigma - ln@logsigma)) {
+     print('standard deviations do not match')
+   } else {
+     print('sd verified')
+   }
Warning in any(logsigma - ln@logsigma) :
  coercing argument of type 'double' to logical
[1] "sd verified"
>   x <- rand(ln, 1000)
>   print(dim(x))
[1]   20 1000
>  
>   print(paste("'ln' should be valid:", validObject(ln)))
[1] "'ln' should be valid: TRUE"
>   ln@logsigma <- 1:3 # now we break it
>   print(paste("'ln' should not be valid:", validObject(ln, test=TRUE)))
[1] "'ln' should not be valid: FALSE"
>   tmp.sd<-sqrt(apply(log(x),1,var))
>   plot(tmp.sd,logsigma)
>   tmp.mu<-apply(log(x),1,mean)
>   plot(tmp.mu,logmu)
>   rm(nGenes, logmu, logsigma, ln, x, tmp.mu, tmp.sd)
> 
> 
> 
> cleanEx()
> nameEx("IndependentNormal-class")
> ### * IndependentNormal-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IndependentNormal-class
> ### Title: The IndependentNormal Class
> ### Aliases: IndependentNormal-class IndependentNormal
> ###   alterMean,IndependentNormal-method alterSD,IndependentNormal-method
> ###   nrow,IndependentNormal-method rand,IndependentNormal-method
> ###   summary,IndependentNormal-method
> ### Keywords: datagen classes distribution
> 
> ### ** Examples
> 
> nGenes <- 20
>   mu <- rnorm(nGenes, 6, 1)
>   sigma <- 1/rgamma(nGenes, rate=14, shape=6)
>   ind <- IndependentNormal(mu, sigma)
>   nrow(ind)
[1] 20
>   summary(ind)
An IndependentNormal object, representing a vector
of length 20 of independent normal random variables.
>   if(any(mu - ind@mu)) {
+     print('means do not match')
+   } else {
+     print('means verified')
+   }
Warning in any(mu - ind@mu) :
  coercing argument of type 'double' to logical
[1] "means verified"
>   if(any(sigma - ind@sigma)) {
+     print('standard deviations do not match')
+   } else {
+     print('sd verified')
+   }
Warning in any(sigma - ind@sigma) :
  coercing argument of type 'double' to logical
[1] "sd verified"
>   x <- rand(ind, 3)
>   print(dim(x))
[1] 20  3
>   print(summary(x))
       V1                V2                V3        
 Min.   :-0.1123   Min.   :-0.6489   Min.   : 3.714  
 1st Qu.: 4.4675   1st Qu.: 5.4908   1st Qu.: 5.381  
 Median : 6.1472   Median : 6.1082   Median : 6.702  
 Mean   : 6.0143   Mean   : 5.9851   Mean   : 7.078  
 3rd Qu.: 7.2727   3rd Qu.: 8.0273   3rd Qu.: 8.304  
 Max.   :15.0345   Max.   : 8.6241   Max.   :13.817  
>   print(paste("'ind' should be valid:", validObject(ind)))
[1] "'ind' should be valid: TRUE"
>   ind@sigma <- 1:3 # now we break it
>   print(paste("'ind' should not be valid:", validObject(ind, test=TRUE)))
[1] "'ind' should not be valid: FALSE"
>   rm(nGenes, mu, sigma, ind, x)
> 
> 
> 
> 
> cleanEx()
> nameEx("MVN-class")
> ### * MVN-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MVN-class
> ### Title: The MV Class
> ### Aliases: MVN-class MVN alterMean,MVN-method alterSD,MVN-method
> ###   nrow,MVN-method rand,MVN-method summary,MVN-method covar,MVN-method
> ###   correl,MVN-method
> ### Keywords: datagen classes distribution
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tolerance <- 1e-10
> ##D   # create a random orthogonal 2x2 matrix
> ##D   a <- runif(1)
> ##D   b <- sqrt(1-a^2)
> ##D   X <- matrix(c(a, b, -b, a), 2, 2)
> ##D   # now choos random positive squared-eigenvalues
> ##D   Lambda2 <- diag(rev(sort(rexp(2))), 2)
> ##D   # construct a covariance matrix
> ##D   Y <- t(X) ##D 
> ##D   # Use the MVN constructor
> ##D   marvin <- MVN(c(0,0), Y)
> ##D   # check the four assertions
> ##D   print(paste('Tolerance for assertion checking:', tolerance))
> ##D   print(paste('Covar  assertion 1:',
> ##D               all(abs(covar(marvin) - Y) < tolerance)
> ##D               ))
> ##D   mar2 <- alterMean(marvin, normalOffset, delta=3)
> ##D   print(paste('Covar  assertion 2:',
> ##D               all(abs(covar(marvin) - covar(mar2)) < tolerance)
> ##D               ))
> ##D   print(paste('Correl assertion 1:',
> ##D               all(abs(diag(correl(marvin)) - 1) < tolerance)
> ##D               ))
> ##D   mar3 <- alterSD(marvin, function(x) 2*x)
> ##D   print(paste('Correl assertion 1:',
> ##D               all(abs(correl(marvin) - correl(mar2)) < tolerance)
> ##D               ))
> ##D   rm(a, b, X, Lambda2, Y, marvin, mar2, mar3)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("NoiseModel-class")
> ### * NoiseModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NoiseModel-class
> ### Title: The "NoiseModel" class
> ### Aliases: NoiseModel-class NoiseModel blur,NoiseModel-method
> ### Keywords: classes datagen
> 
> ### ** Examples
> 
> 
> nComp <- 10
> nGenes <- 100
> comp <- list()
> for (i in 1:nComp){
+   comp[[i]] <- IndependentLogNormal(rnorm(nGenes/nComp,6,1.5),1/rgamma(nGenes/nComp,44,28))
+ }
> myEngine <- Engine(comp)
> myData <- rand(myEngine,5)
> summary(myData)
       V1                  V2                  V3                  V4          
 Min.   :    8.773   Min.   :    5.473   Min.   :    8.663   Min.   :   20.08  
 1st Qu.:  151.594   1st Qu.:  142.674   1st Qu.:  151.377   1st Qu.:  160.84  
 Median :  398.404   Median :  460.319   Median :  453.553   Median :  521.51  
 Mean   : 1366.721   Mean   : 1560.749   Mean   : 1345.365   Mean   : 1451.13  
 3rd Qu.: 1488.095   3rd Qu.: 1414.870   3rd Qu.: 1438.817   3rd Qu.: 1546.01  
 Max.   :13309.824   Max.   :12967.290   Max.   :16319.794   Max.   :17149.88  
       V5          
 Min.   :   10.64  
 1st Qu.:  151.44  
 Median :  446.64  
 Mean   : 1283.34  
 3rd Qu.: 1351.22  
 Max.   :10453.67  
> 
> nu <- 10
> tau <- 20
> phi <- 0.1
> nm <- NoiseModel(nu,tau,phi)
> realData <- blur(nm, myData)
> summary(realData)
       V1                 V2                 V3                 V4           
 Min.   :  -14.45   Min.   :  -10.38   Min.   :  -22.75   Min.   :    7.662  
 1st Qu.:  153.48   1st Qu.:  147.02   1st Qu.:  158.52   1st Qu.:  173.874  
 Median :  388.94   Median :  467.78   Median :  467.25   Median :  485.962  
 Mean   : 1397.59   Mean   : 1521.47   Mean   : 1337.01   Mean   : 1435.408  
 3rd Qu.: 1369.03   3rd Qu.: 1362.73   3rd Qu.: 1413.45   3rd Qu.: 1549.962  
 Max.   :14039.99   Max.   :12051.04   Max.   :17503.27   Max.   :17296.470  
       V5           
 Min.   :   -4.247  
 1st Qu.:  169.230  
 Median :  459.541  
 Mean   : 1346.406  
 3rd Qu.: 1460.090  
 Max.   :10505.153  
> 
> 
> 
> cleanEx()
> nameEx("SurvivalModel-class")
> ### * SurvivalModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SurvivalModel-class
> ### Title: Class "SurvivalModel" ~~~
> ### Aliases: SurvivalModel SurvivalModel-class
> ### Keywords: classes datagen
> 
> ### ** Examples
> 
> showClass("SurvivalModel")
Class "SurvivalModel" [package "Umpire"]

Slots:
                                                             
Name:  baseHazard    accrual   followUp      units   unitName
Class:    numeric    numeric    numeric    numeric  character
> 
> 
> 
> cleanEx()
> nameEx("alterObjectComponent")
> ### * alterObjectComponent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alterObjectComponents-method
> ### Title: Functions for alter components in the list("Engine") object
> ### Aliases: alterMean alterSD normalOffset invGammaMultiple
> ### Keywords: datagen distribution
> 
> ### ** Examples
> 
> nComp <- 10
> nGenes <- 100
> comp <- list()
> for (i in 1:nComp){
+   comp[[i]] <- IndependentNormal(rnorm(nGenes/nComp,6,1.5),1/rgamma(nGenes/nComp,44,28))
+ }
> myEngine <- Engine(comp)
> nrow(myEngine)
[1] 100
> nComponents(myEngine)
[1] 10
> summary(myEngine)
An Engine with 10 components.
> myData <- rand(myEngine,5)
> dim(myData)
[1] 100   5
> summary(myData)
       V1              V2              V3              V4       
 Min.   :2.172   Min.   :1.700   Min.   :2.159   Min.   :3.000  
 1st Qu.:5.021   1st Qu.:4.961   1st Qu.:5.020   1st Qu.:5.080  
 Median :5.987   Median :6.131   Median :6.116   Median :6.257  
 Mean   :6.076   Mean   :6.131   Mean   :6.130   Mean   :6.209  
 3rd Qu.:7.305   3rd Qu.:7.255   3rd Qu.:7.270   3rd Qu.:7.343  
 Max.   :9.496   Max.   :9.470   Max.   :9.700   Max.   :9.750  
       V5       
 Min.   :2.365  
 1st Qu.:5.020  
 Median :6.102  
 Mean   :6.108  
 3rd Qu.:7.209  
 Max.   :9.255  
> MEAN <- 2
> SD <- 2
> myEngine.alterMean <- alterMean(myEngine,function(x)normalOffset(x,
+ MEAN, SD))
> myData.alterMean <- rand(myEngine.alterMean,5)
> summary(myData.alterMean)
       V1               V2               V3               V4        
 Min.   : 3.069   Min.   : 2.910   Min.   : 2.526   Min.   : 2.463  
 1st Qu.: 6.468   1st Qu.: 6.337   1st Qu.: 6.542   1st Qu.: 6.449  
 Median : 7.979   Median : 8.174   Median : 7.885   Median : 8.080  
 Mean   : 8.189   Mean   : 8.231   Mean   : 8.152   Mean   : 8.216  
 3rd Qu.:10.267   3rd Qu.:10.248   3rd Qu.:10.065   3rd Qu.:10.153  
 Max.   :15.190   Max.   :14.603   Max.   :14.447   Max.   :14.242  
       V5        
 Min.   : 2.451  
 1st Qu.: 6.184  
 Median : 8.028  
 Mean   : 8.174  
 3rd Qu.: 9.803  
 Max.   :14.464  
> RATE <- 1
> SHAPE <- 2
> myEngine.alterSD <- alterSD(myEngine,function(x)invGammaMultiple(x,SHAPE,RATE))
> myData.alterSD <- rand(myEngine.alterSD,5)
> summary(myData.alterSD)
       V1               V2              V3                V4        
 Min.   :0.3054   Min.   :1.552   Min.   : 0.7034   Min.   :-2.653  
 1st Qu.:5.0892   1st Qu.:5.287   1st Qu.: 5.0745   1st Qu.: 4.996  
 Median :6.0352   Median :6.260   Median : 6.1364   Median : 6.133  
 Mean   :6.0698   Mean   :6.195   Mean   : 6.1914   Mean   : 5.930  
 3rd Qu.:7.2186   3rd Qu.:7.093   3rd Qu.: 7.2292   3rd Qu.: 7.268  
 Max.   :9.7900   Max.   :9.868   Max.   :11.1257   Max.   :10.466  
       V5        
 Min.   :0.1702  
 1st Qu.:4.9071  
 Median :5.9141  
 Mean   :6.0265  
 3rd Qu.:7.2429  
 Max.   :9.4771  
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.579 0.007 0.651 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
